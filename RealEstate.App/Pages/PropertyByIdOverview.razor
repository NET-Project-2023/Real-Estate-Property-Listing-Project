@page "/findproperty/{title}"
@using RealEstate.App.Contracts
@using RealEstate.App.ViewModels

@inject IPropertyDataService PropertyDataService


@* <div class="row mb-2">
    <div class="col-md-6">
        <input @bind="PropertyName" class="form-control" placeholder="Enter property name" />
    </div>
    <div class="col-md-6">
        <button @onclick="SearchProperty" class="btn btn-primary">Search</button>
    </div>
</div> *@

@if (Property != null)
{
    <h3>@Property.Title</h3>
    <div class="card mt-3">
        <div class="card-body">

            <p class="card-text"><strong>Description:</strong> @Property.Description</p>
            <p class="card-text"><strong>Address:</strong> @Property.Address</p>
            <p class="card-text"><strong>Size:</strong> @Property.Size</p>
            <p class="card-text"><strong>Price:</strong> @Property.Price</p>
            <p class="card-text"><strong>Bedrooms:</strong> @Property.NumberOfBedrooms</p>
            <p class="card-text"><strong>Bathrooms:</strong> @Property.NumberOfBathrooms</p>
            <!-- and other property details -->
        </div>
    </div>
}
else if (SearchAttempted)
{
    <p>No property found with the specified title.</p>
}

@code {
    private string PropertyName { get; set; } = string.Empty;
    private PropertyDto Property { get; set; }
    private bool SearchAttempted { get; set; } = false;
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    [Parameter]
    public string title { get; set; }

    // private async Task SearchProperty()
    // {
    //     SearchAttempted = true;
    //     Property = await PropertyDataService.GetPropertyByNameAsync(PropertyName);
    // }

    protected override async Task OnInitializedAsync()
    {
        PropertyName = NavigationManager.Uri.Split('/').LastOrDefault();
        Property = await PropertyDataService.GetPropertyByNameAsync(PropertyName);
        SearchAttempted = true;
    }
}
