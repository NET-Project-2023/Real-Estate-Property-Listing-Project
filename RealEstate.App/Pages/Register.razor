@page "/register"
@using RealEstate.App.Auth
@using RealEstate.App.ViewModels
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider

<h1 class="h2 font-weight-normal login-title">
    Register
</h1>

<EditForm class="form-signup" OnValidSubmit="OnSubmit" Model="registerRequest">
    <DataAnnotationsValidator />

    <label for="inputUsername" class="sr-only">Username</label>
    <InputText id="inputUsername" class="form-control" @bind-Value="registerRequest.Username" autofocus placeholder="Username" />
    <ValidationMessage For="@(() => registerRequest.Username)" />

    <label for="inputName" class="sr-only">Name</label>
    <InputText id="inputName" class="form-control" @bind-Value="registerRequest.Name" placeholder="Name" />
    <ValidationMessage For="@(() => registerRequest.Name)" />

    <label for="inputEmail" class="sr-only">Email</label>
    <InputText type="email" id="inputEmail" class="form-control" @bind-Value="registerRequest.Email" placeholder="Email" />
    <ValidationMessage For="@(() => registerRequest.Email)" />

    <label for="inputPassword" class="sr-only">Password</label>
    <InputText type="password" id="inputPassword" class="form-control" placeholder="Password" @bind-Value="registerRequest.Password" />
    <ValidationMessage For="@(() => registerRequest.Password)" />

    <!-- New Confirmed Password Field -->
    <label for="inputConfirmedPassword" class="sr-only">Confirm Password</label>
    <InputText type="password" id="inputConfirmedPassword" class="form-control" placeholder="Confirm Password" @bind-Value="registerRequest.ConfirmedPassword" />
    <ValidationMessage For="@(() => registerRequest.ConfirmedPassword)" />

    <br />

    <button class="btn btn-lg btn-primary btn-block" type="submit">Register</button>

    <label class="text-danger">@error</label>

    <NavLink href="login">
        <h6 class="font-weight-normal text-center">Already have an account? Login</h6>
    </NavLink>
</EditForm>

@code {
    RegisterViewModel registerRequest { get; set; } = new RegisterViewModel();
    string error { get; set; }

    async Task OnSubmit()
    {
        error = null;
        try
        {
            // Add password confirmation check here
            if (registerRequest.Password != registerRequest.ConfirmedPassword)
            {
                throw new ApplicationException("Password and Confirmed Password must match.");
            }

            await authStateProvider.Register(registerRequest);
            navigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}
