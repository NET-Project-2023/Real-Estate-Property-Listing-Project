@page "/admin/user/{username}"
@using RealEstate.App.ViewModels
@using RealEstate.App.Contracts
@inject IJSRuntime JSRuntime



<style scoped>
    .profile-container {
        font-family: Arial, sans-serif;
        max-width: 600px;
        margin: auto;
        padding: 20px;
        border: 1px solid #eee;
        border-radius: 5px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        background-color: #f8f9fa;
    }

    .profile-header {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
        border-bottom: 1px solid #dee2e6;
        padding-bottom: 10px;
    }

    .profile-header-icon {
        font-size: 2em;
        margin-right: 10px;
    }

    .profile-field {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
    }

    .profile-field-icon {
        margin-right: 10px;
    }

    .user-not-found {
        color: #9b9b9b;
        text-align: center;
    }

    .delete-button {
        display: flex;
        justify-content: flex-end;
        margin-top: 20px;
    }

    .properties-container {
        margin-top: 40px;
    }

    .property-card {
        border: 1px solid #eee;
        border-radius: 5px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        background-color: #f8f9fa;
        margin-bottom: 20px;
        padding: 20px;
    }

    .property-header {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
    }

    .property-header-icon {
        font-size: 1.5em;
        margin-right: 10px;
    }

    .property-field {
        display: flex;
        align-items: center;
        margin-bottom: 10px;
    }

    .property-field-icon {
        margin-right: 10px;
    }


    .property-images {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        grid-gap: 10px;
        margin-top: 20px;
    }

    .property-image {
        width: 100%;
        height: 0;
        padding-bottom: 75%;
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
    }

    .user-details {
        margin: auto;
        max-width: 600px;
    }

</style>

@if (isLoading)
{
    <div class="loading-overlay">
        <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="container mt-5">
        <h3>User Profile</h3>

        @if (User != null)
        {
            <div class="profile-container user-details">

                <div class="profile-header">
                    <i class="fas fa-user profile-header-icon"></i>
                    <h4>@User.Username</h4>
                </div>
                <div class="profile-field">
                    <i class="fas fa-address-card profile-field-icon"></i>
                    <p>Name: @User.Name</p>
                </div>
                <div class="profile-field">
                    <i class="fas fa-envelope profile-field-icon"></i>
                    <p>Email: @User.Email</p>
                </div>
                <div class="profile-field">
                    <i class="fas fa-phone profile-field-icon"></i>
                    <p>Phone Number: @User.PhoneNumber</p>
                </div>
                <div class="delete-button">
                    <button class="btn btn-danger" @onclick="() => DeleteUser(User.Username)"><i class="fas fa-trash"></i> Delete User</button>
                </div>

            </div>

            @if (CurrentProperties != null && CurrentProperties.Any())
            {
                <div class="properties-container">
                    <h3><i class="fas fa-building"></i> Properties Owned</h3>

                    @foreach (var property in CurrentProperties)
                    {
                        <div class="property-card">
                            <div class="property-header">
                                <i class="fas fa-home property-header-icon"></i>
                                <h5>@property.Title</h5>
                                <div class="delete-property-button ml-auto">
                                    <button class="btn btn-danger" @onclick="() => DeleteProperty(property.PropertyId)"><i class="fas fa-trash"></i></button>
                                </div>
                            </div>
                            <div class="property-field">
                                <i class="fas fa-map-marker-alt property-field-icon"></i>
                                <p>Location: @property.City</p>
                            </div>
                            <div class="property-field">
                                <i class="fas fa-ruler-combined property-field-icon"></i>
                                <p>Size: @property.Size m²</p>
                            </div>
                            <div class="property-field">
                                <i class="fas fa-info-circle property-field-icon"></i>
                                <p>Description: @property.Description</p>
                            </div>

                            <div class="property-images">
                                @foreach (var image in property.Images)
                                {
                                    <div class="property-image" style="background-image: url('@GetImageBase64(image)');"></div>
                                }
                            </div>
                        </div>
                    }
                </div>
            }

        }
        else
        {
            <p class="user-not-found"><i class="fas fa-exclamation-circle"></i> User not found.</p>
        }
    </div>
}


@code {

    [Inject]
    public IUserService UserService { get; set; }

    [Inject]
    public IPropertyDataService PropertyDataService { get; set; }

    [Inject]
    public IListingDataService ListingDataService { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Parameter]
    public string username { get; set; }

    private bool isLoading { get; set; } = true;

    private UserViewModel User { get; set; }

    private List<ListingViewModel>? CurrentListings { get; set; } = new List<ListingViewModel>();

    private List<PropertyViewModel>? CurrentProperties { get; set; } = new List<PropertyViewModel>();

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        User = await UserService.GetUser(username);
        CurrentProperties = await PropertyDataService.GetPropertiesByOwner(username);
        var listings = await ListingDataService.GetListingsAsync();

        foreach (var property in CurrentProperties)
        {
            var matchingListing = listings.FirstOrDefault(listing => listing.PropertyId == property.PropertyId);
            if (matchingListing != null)
            {
                CurrentListings.Add(matchingListing);
            }
        }

        isLoading = false;
    }

    private async Task DeleteUser(string username)
    {
        bool confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user and all his properties?");
        if (confirmDelete)
        {
            try
            {
                // Delete listings
                if (CurrentListings != null)
                {
                    foreach (var listing in CurrentListings)
                    {
                        await ListingDataService.DeleteListingAsync(listing.ListingId);
                    }
                }


                // Delete properties
                if (CurrentProperties != null)
                {
                    foreach (var property in CurrentProperties)
                    {
                        await PropertyDataService.DeletePropertyAsync(property.PropertyId);
                    }
                }

                // Delete user
                var response = await UserService.DeleteUser(username);
                if (response.IsSuccess)
                {
                    NavigationManager.NavigateTo("/admin/useroverview");
                }
                else
                {
                    Console.WriteLine($"Error deleting user: {response.Message}");
                    throw new Exception($"Error deleting user: {response.Message}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting user and associated data: {ex.Message}");
                throw;
            }
        }

    }

    private async Task DeleteProperty(Guid propertyId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this property?");
        if (confirmed)
        {
            try
            {
                await PropertyDataService.DeletePropertyAsync(propertyId);
                CurrentProperties = await PropertyDataService.GetPropertiesByOwner(User.Username);
                StateHasChanged(); 
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting property: {ex.Message}");
                return;
            }
        }
    }


    private string GetImageBase64(byte[] image)
    {
        var base64String = Convert.ToBase64String(image);
        return $"data:image/png;base64,{base64String}";
    }

}