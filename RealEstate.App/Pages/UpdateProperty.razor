@page "/updateproperty/{title}"
@using Microsoft.AspNetCore.Components.Authorization
@using RealEstate.App.Contracts
@using RealEstate.App.Services
@using RealEstate.App.ViewModels
@inject IPropertyDataService PropertyDataService
@inject ITokenService tokenService
@inject NavigationManager NavigationManager

<h3 class="text-center text-primary mb-4">Edit Property</h3>

@if (UpdatePropertyModel == null)
{
    <p class="alert alert-warning">No property found with this title...</p>
}
else
{
    <EditForm Model="@UpdatePropertyModel" OnValidSubmit="@HandleValidSubmit" class="border p-4 rounded shadow">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <!-- Description -->
        <div class="form-group">
            <label for="description">Description:</label>
            <InputTextArea id="description" class="form-control" @bind-Value="@UpdatePropertyModel.Description" />
        </div>

        <!-- Address -->
        <div class="form-group">
            <label for="address">Address:</label>
            <InputTextArea id="address" class="form-control" @bind-Value="@UpdatePropertyModel.Address" />
        </div>

        <!-- Price -->
        <div class="form-group">
            <label for="price">Price:</label>
            <InputNumber id="price" class="form-control" @bind-Value="@UpdatePropertyModel.Price" />
        </div>

        <!-- Size -->
        <div class="form-group">
            <label for="size">Size:</label>
            <InputNumber id="size" class="form-control" @bind-Value="@UpdatePropertyModel.Size" />
        </div>

        <!-- Bedrooms -->
        <div class="form-group">
            <label for="bedroom">Bedrooms:</label>
            <InputNumber id="bedroom" class="form-control" @bind-Value="@UpdatePropertyModel.NumberOfBedrooms" />
        </div>

        <!-- Bathrooms -->
        <div class="form-group">
            <label for="bathroom">Bathrooms:</label>
            <InputNumber id="bathroom" class="form-control" @bind-Value="@UpdatePropertyModel.NumberOfBathrooms" />
        </div>

        <!-- Display current images -->
        <div>
            <h5 class="text-secondary">Current Images</h5>
            @foreach (var image in UpdatePropertyModel.Images)
            {
                <div class="d-inline-block text-center m-2">
                    <img src="@($"data:image/png;base64,{Convert.ToBase64String(image)}")" alt="Property Image" class="img-fluid rounded" style="width: 150px; height: 150px;" />
                    <div class="mt-2">
                        <button type="button" class="btn btn-outline-danger" @onclick="() => RemoveImage(image)">
                            <i class="fas fa-trash-alt"></i> Remove
                        </button>
                    </div>
                </div>
            }
        </div>

        <!-- Upload new images -->
        <div class="form-group mt-4">
            <label for="newImages">Upload New Images:</label>
            <InputFile id="newImages" class="form-control" multiple OnChange="@HandleFileChange" />
        </div>

        <!-- Submit Button -->
        <button type="submit" class="btn btn-primary btn-block">Update Property</button>
    </EditForm>
}



@code {
    private PropertyDto UpdatePropertyModel;
    private string PropertyTitle { get; set; } = string.Empty;
    private bool SearchAttempted { get; set; } = false;
    private const long maxFileSize = 10485760; // 10 MB
    private List<byte[]> RemovedImages = new List<byte[]>();


    [Parameter]
    public string title { get; set; }

    protected override async Task OnInitializedAsync()
    {
        PropertyTitle = NavigationManager.Uri.Split('/').LastOrDefault();
        UpdatePropertyModel = await PropertyDataService.GetPropertyByNameAsync(PropertyTitle);
        string loggedInUsername = await tokenService.GetUsernameFromTokenAsync();
        Console.WriteLine("LOGGEDIN pentru UPDATE: ", loggedInUsername); 
        if(UpdatePropertyModel.UserId != loggedInUsername && loggedInUsername != null)
        {
            NavigationManager.NavigateTo("/unauthorized");
        }

        SearchAttempted = true;
    }

    private async Task HandleValidSubmit()
    {

        Console.WriteLine($"Number of remaining images: {UpdatePropertyModel.Images.Count}");

        var result = await PropertyDataService.UpdatePropertyAsync(UpdatePropertyModel);

        if (result.IsSuccess)
        {
            NavigationManager.NavigateTo("/myproperties");
        }
        else
        {
            // Handle error scenario
            Console.WriteLine($"Error updating property: {result.Message}");
        }
    }

    private void RemoveImage(byte[] image)
    {
        UpdatePropertyModel.Images.Remove(image);
        RemovedImages.Add(image);
        Console.WriteLine($"Number of remaining images: {UpdatePropertyModel.Images.Count}");

    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var maxAllowedFiles = 10; 
        var files = e.GetMultipleFiles(maxAllowedFiles);


        foreach (var file in files)
        {
            if (file.Size <= maxFileSize)
            {
                UpdatePropertyModel.ImagesFiles.Add(file);
            }
            else
            {
                Console.WriteLine($"{file.Name} is too large. Max file size is {maxFileSize} bytes.");
            }
        }
    }
}
